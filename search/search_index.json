{
    "docs": [
        {
            "location": "/", 
            "text": "PlinkerRPC PHP client/server makes it really easy to link and execute PHP component classes on remote systems, while maintaining the feel of a local method call.\n\n\nA cron component which allows you to read and control cron tasks.\n\n\nComposer\n\n\n{\n    \nrequire\n: {\n        \nplinker/cron\n: \n=v0.1\n\n    }\n}\n\n\n\n\n\nMaking remote calls.\n\n\n?php\n\n\nrequire\n \n../../vendor/autoload.php\n;\n\n\n\ntry\n \n{\n\n\n    \n/**\n\n\n     * Plinker Config\n\n\n     */\n\n    \n$config\n \n=\n \n[\n\n        \n// plinker connection | using tasks as to write in the correct .sqlite file\n\n        \nplinker\n \n=\n \n[\n\n            \nendpoint\n \n=\n \nhttp://127.0.0.1/examples/cron/server.php\n,\n\n            \npublic_key\n  \n=\n \nmakeSomethingUp\n,\n\n            \nprivate_key\n \n=\n \nagainMakeSomethingUp\n\n        \n],\n\n\n        \n// optional config\n\n        \nconfig\n \n=\n \n[\n\n            \njournal\n \n=\n \n./crontab.journal\n,\n\n            \napply\n   \n=\n \nfalse\n\n        \n]\n\n    \n];\n\n\n    \n// init plinker endpoint client\n\n    \n$cron\n \n=\n \nnew\n \n\\Plinker\\Core\\Client\n(\n\n        \n// where is the plinker server\n\n        \n$config\n[\nplinker\n][\nendpoint\n],\n\n\n        \n// component namespace to interface to\n\n        \nCron\\Manager\n,\n\n\n        \n// keys\n\n        \n$config\n[\nplinker\n][\npublic_key\n],\n\n        \n$config\n[\nplinker\n][\nprivate_key\n],\n\n\n        \n// construct array which you pass to the component\n\n        \n$config\n[\nconfig\n]\n\n    \n);\n\n\n    \n// get crontab as-is\n\n    \necho\n \nh2\n$cron-\ncrontab()\n/h2\n;\n\n    \necho\n \npre\n.\n$cron\n-\ncrontab\n()\n.\n/pre\n;\n\n\n    \n// create a crontask\n\n    \necho\n \nh2\n$cron-\ncreate(\\\nMy Cron Task\\\n, \\\n* * * * * cd ~\\\n)\n/h2\n;\n\n    \necho\n \npre\n.\n$cron\n-\ncreate\n(\nMy Cron Task\n,\n \n* * * * * cd ~\n)\n.\n/pre\n;\n\n\n    \n// get cron task\n\n    \necho\n \nh2\n$cron-\nget(\\\nMy Cron Task\\\n)\n/h2\n;\n\n    \necho\n \npre\n.\n$cron\n-\nget\n(\nMy Cron Task\n)\n.\n/pre\n;\n\n\n    \n// update cron task\n\n    \necho\n \nh2\n$cron-\nupdate(\\\nMy Cron Task\\\n, \\\n0 * * * * cd ~\\\n)\n/h2\n;\n\n    \necho\n \npre\n.\n$cron\n-\nupdate\n(\nMy Cron Task\n,\n \n0 * * * * cd ~\n)\n.\n/pre\n;\n\n\n    \n// get cron task\n\n    \necho\n \nh2\n$cron-\nget(\\\nMy Cron Task\\\n)\n/h2\n;\n\n    \necho\n \npre\n.\n$cron\n-\nget\n(\nMy Cron Task\n)\n.\n/pre\n;\n\n\n    \n// delete cron task\n\n    \necho\n \nh2\n$cron-\ndelete(\\\nMy Cron Task\\\n)\n/h2\n;\n\n    \necho\n \npre\n.\n$cron\n-\ndelete\n(\nMy Cron Task\n)\n.\n/pre\n;\n\n\n    \n// get cron task\n\n    \necho\n \nh2\n$cron-\nget(\\\nMy Cron Task\\\n)\n/h2\n;\n\n    \necho\n \npre\n.\n$cron\n-\nget\n(\nMy Cron Task\n)\n.\n/pre\n;\n\n\n    \n// drop cron task\n\n    \necho\n \nh2\n$cron-\ndrop()\n/h2\n;\n\n    \necho\n \npre\n.\n$cron\n-\ndrop\n()\n.\n/pre\n;\n\n\n    \n// get crontab as-is\n\n    \necho\n \nh2\n$cron-\ncrontab()\n/h2\n;\n\n    \necho\n \npre\n.\n$cron\n-\ncrontab\n()\n.\n/pre\n;\n\n\n    \n// apply crontab\n\n    \necho\n \nh2\n$cron-\napply()\n/h2\n;\n\n    \necho\n \npre\n.\n$cron\n-\napply\n()\n.\n/pre\n;\n\n\n\n}\n \ncatch\n \n(\n\\Exception\n \n$e\n)\n \n{\n\n    \nexit\n(\nget_class\n(\n$e\n)\n.\n: \n.\n$e\n-\ngetMessage\n());\n\n\n}\n\n\n\n\n\n\nthen the server part...\n\n\n?php\n\n\nrequire\n \n../../vendor/autoload.php\n;\n\n\n\n/**\n\n\n * Its POST..\n\n\n */\n\n\nif\n \n(\n$_SERVER\n[\nREQUEST_METHOD\n]\n \n==\n \nPOST\n)\n \n{\n\n\n    \n/**\n\n\n     * Its Plinker!\n\n\n     */\n\n    \nif\n \n(\nisset\n(\n$_SERVER\n[\nHTTP_PLINKER\n]))\n \n{\n\n        \n// test its encrypted\n\n        \nfile_put_contents\n(\n./.plinker/encryption-proof.txt\n,\n \nprint_r\n(\n$_POST\n,\n \ntrue\n));\n\n\n        \n/**\n\n\n         * Define Plinker Config\n\n\n         */\n\n        \n$plinker\n \n=\n \n[\n\n            \npublic_key\n  \n=\n \nmakeSomethingUp\n,\n\n            \nprivate_key\n \n=\n \nagainMakeSomethingUp\n,\n\n            \n// optional config\n\n            \n/*\nconfig\n =\n [\n\n\n                // allowed ips, restrict access by ip\n\n\n                \nallowed_ips\n =\n [\n\n\n                    \n127.0.0.1\n\n\n                ]\n\n\n            ]*/\n\n        \n];\n\n\n        \n// init plinker server\n\n        \n$server\n \n=\n \nnew\n \n\\Plinker\\Core\\Server\n(\n\n            \n$_POST\n,\n\n            \n$plinker\n[\npublic_key\n],\n\n            \n$plinker\n[\nprivate_key\n],\n\n            \n(\narray\n)\n \n@\n$plinker\n[\nconfig\n]\n\n        \n);\n\n\n        \nexit\n(\n$server\n-\nexecute\n());\n\n    \n}\n\n\n}\n\n\n\n\n\n\nSee the \norganisations page\n for additional components.", 
            "title": "Home"
        }, 
        {
            "location": "/#making-remote-calls", 
            "text": "?php  require   ../../vendor/autoload.php ;  try   { \n\n     /**       * Plinker Config       */ \n     $config   =   [ \n         // plinker connection | using tasks as to write in the correct .sqlite file \n         plinker   =   [ \n             endpoint   =   http://127.0.0.1/examples/cron/server.php , \n             public_key    =   makeSomethingUp , \n             private_key   =   againMakeSomethingUp \n         ], \n\n         // optional config \n         config   =   [ \n             journal   =   ./crontab.journal , \n             apply     =   false \n         ] \n     ]; \n\n     // init plinker endpoint client \n     $cron   =   new   \\Plinker\\Core\\Client ( \n         // where is the plinker server \n         $config [ plinker ][ endpoint ], \n\n         // component namespace to interface to \n         Cron\\Manager , \n\n         // keys \n         $config [ plinker ][ public_key ], \n         $config [ plinker ][ private_key ], \n\n         // construct array which you pass to the component \n         $config [ config ] \n     ); \n\n     // get crontab as-is \n     echo   h2 $cron- crontab() /h2 ; \n     echo   pre . $cron - crontab () . /pre ; \n\n     // create a crontask \n     echo   h2 $cron- create(\\ My Cron Task\\ , \\ * * * * * cd ~\\ ) /h2 ; \n     echo   pre . $cron - create ( My Cron Task ,   * * * * * cd ~ ) . /pre ; \n\n     // get cron task \n     echo   h2 $cron- get(\\ My Cron Task\\ ) /h2 ; \n     echo   pre . $cron - get ( My Cron Task ) . /pre ; \n\n     // update cron task \n     echo   h2 $cron- update(\\ My Cron Task\\ , \\ 0 * * * * cd ~\\ ) /h2 ; \n     echo   pre . $cron - update ( My Cron Task ,   0 * * * * cd ~ ) . /pre ; \n\n     // get cron task \n     echo   h2 $cron- get(\\ My Cron Task\\ ) /h2 ; \n     echo   pre . $cron - get ( My Cron Task ) . /pre ; \n\n     // delete cron task \n     echo   h2 $cron- delete(\\ My Cron Task\\ ) /h2 ; \n     echo   pre . $cron - delete ( My Cron Task ) . /pre ; \n\n     // get cron task \n     echo   h2 $cron- get(\\ My Cron Task\\ ) /h2 ; \n     echo   pre . $cron - get ( My Cron Task ) . /pre ; \n\n     // drop cron task \n     echo   h2 $cron- drop() /h2 ; \n     echo   pre . $cron - drop () . /pre ; \n\n     // get crontab as-is \n     echo   h2 $cron- crontab() /h2 ; \n     echo   pre . $cron - crontab () . /pre ; \n\n     // apply crontab \n     echo   h2 $cron- apply() /h2 ; \n     echo   pre . $cron - apply () . /pre ;  }   catch   ( \\Exception   $e )   { \n     exit ( get_class ( $e ) . :  . $e - getMessage ());  }   then the server part...  ?php  require   ../../vendor/autoload.php ;  /**   * Its POST..   */  if   ( $_SERVER [ REQUEST_METHOD ]   ==   POST )   { \n\n     /**       * Its Plinker!       */ \n     if   ( isset ( $_SERVER [ HTTP_PLINKER ]))   { \n         // test its encrypted \n         file_put_contents ( ./.plinker/encryption-proof.txt ,   print_r ( $_POST ,   true )); \n\n         /**           * Define Plinker Config           */ \n         $plinker   =   [ \n             public_key    =   makeSomethingUp , \n             private_key   =   againMakeSomethingUp , \n             // optional config \n             /* config  =  [                  // allowed ips, restrict access by ip                   allowed_ips  =  [                       127.0.0.1                  ]              ]*/ \n         ]; \n\n         // init plinker server \n         $server   =   new   \\Plinker\\Core\\Server ( \n             $_POST , \n             $plinker [ public_key ], \n             $plinker [ private_key ], \n             ( array )   @ $plinker [ config ] \n         ); \n\n         exit ( $server - execute ()); \n     }  }   See the  organisations page  for additional components.", 
            "title": "Making remote calls."
        }
    ]
}